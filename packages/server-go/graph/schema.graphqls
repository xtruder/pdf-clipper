type Query {
  getAccountChanges(since: DateTime!, limit: Int = 100): [Account!]!
  getAccountInfoChanges(since: DateTime!, limit: Int = 100): [AccountInfo!]!
  getSessionChanges(since: DateTime!, limit: Int = 100): [Session!]!
  getDocumentChanges(since: DateTime!, limit: Int = 100): [Document!]!
  getDocumentMemberChanges(since: DateTime!, limit: Int = 100): [DocumentMember!]!
  getDocumentHighlightChanges(since: DateTime!, limit: Int = 100): [DocumentHighlight!]!
  getBlobInfoChanges(since: DateTime!, limit: Int = 100): [BlobInfo!]!
}

"""schema for account"""
type Account {
  id: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String
}

scalar UUID

scalar DateTime

"""schema for account"""
type AccountInfo {
  id: UUID!
  name: String
  updatedAt: DateTime
}

"""schema for session"""
type Session {
  id: UUID!
  accountId: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  syncDocuments: [String]
}

"""schema holding documents"""
type Document {
  id: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: UUID
  type: String!
  fileHash: String
  meta: JSON
  local: Boolean
}

scalar JSON

"""schema holding account documents"""
type DocumentMember {
  id: String
  documentId: UUID!
  accountId: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  acceptedAt: DateTime
  role: String!
  createdBy: UUID
  local: Boolean
}

"""schema for document highlights"""
type DocumentHighlight {
  id: UUID!
  documentId: UUID!
  documentType: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: UUID
  content: JSON
  location: JSON
  sequence: String!
  imageHash: String
  local: Boolean
}

"""schema for blobinfos collection"""
type BlobInfo {
  hash: String!
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UUID
  type: String!
  mimeType: String!
  size: Int!
  source: String!
  local: Boolean
}

type Mutation {
  pushAccountChanges(input: [AccountInput!]!): AccountUpdateResult!
  pushAccountInfoChanges(input: [AccountInfoInput!]!): AccountInfoUpdateResult!
  pushSessionChanges(input: [SessionInput!]!): SessionUpdateResult!
  pushDocumentChanges(input: [DocumentInput!]!): DocumentUpdateResult!
  pushDocumentMemberChanges(input: [DocumentMemberInput!]!): DocumentMemberUpdateResult!
  pushDocumentHighlightChanges(input: [DocumentHighlightInput!]!): DocumentHighlightUpdateResult!
  pushBlobInfoChanges(input: [BlobInfoInput!]!): BlobInfoUpdateResult!
}

type AccountUpdateResult {
  """list of updated documents that have been successfully processed"""
  updated: [Account!]!

  """list of rejected documents, with current returned state"""
  rejected: [Account!]!

  """List of errors associated with rejected documents"""
  errors: [UpdateError!]
}

type UpdateError {
  """Id of the resource that failed update"""
  id: String!

  """Error string associated with upd"""
  error: String
}

"""schema for account"""
input AccountInput {
  id: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String
}

type AccountInfoUpdateResult {
  """list of updated documents that have been successfully processed"""
  updated: [AccountInfo!]!

  """list of rejected documents, with current returned state"""
  rejected: [AccountInfo!]!

  """List of errors associated with rejected documents"""
  errors: [UpdateError!]
}

"""schema for account"""
input AccountInfoInput {
  id: UUID!
  name: String
  updatedAt: DateTime
}

type SessionUpdateResult {
  """list of updated documents that have been successfully processed"""
  updated: [Session!]!

  """list of rejected documents, with current returned state"""
  rejected: [Session!]!

  """List of errors associated with rejected documents"""
  errors: [UpdateError!]
}

"""schema for session"""
input SessionInput {
  id: UUID!
  accountId: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  syncDocuments: [String]
}

type DocumentUpdateResult {
  """list of updated documents that have been successfully processed"""
  updated: [Document!]!

  """list of rejected documents, with current returned state"""
  rejected: [Document!]!

  """List of errors associated with rejected documents"""
  errors: [UpdateError!]
}

"""schema holding documents"""
input DocumentInput {
  id: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: UUID
  type: String!
  fileHash: String
  meta: JSON
  local: Boolean
}

type DocumentMemberUpdateResult {
  """list of updated documents that have been successfully processed"""
  updated: [DocumentMember!]!

  """list of rejected documents, with current returned state"""
  rejected: [DocumentMember!]!

  """List of errors associated with rejected documents"""
  errors: [UpdateError!]
}

"""schema holding account documents"""
input DocumentMemberInput {
  id: String
  documentId: UUID!
  accountId: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  acceptedAt: DateTime
  role: String!
  createdBy: UUID
  local: Boolean
}

type DocumentHighlightUpdateResult {
  """list of updated documents that have been successfully processed"""
  updated: [DocumentHighlight!]!

  """list of rejected documents, with current returned state"""
  rejected: [DocumentHighlight!]!

  """List of errors associated with rejected documents"""
  errors: [UpdateError!]
}

"""schema for document highlights"""
input DocumentHighlightInput {
  id: UUID!
  documentId: UUID!
  documentType: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  createdBy: UUID
  content: JSON
  location: JSON
  sequence: String!
  imageHash: String
  local: Boolean
}

type BlobInfoUpdateResult {
  """list of updated documents that have been successfully processed"""
  updated: [BlobInfo!]!

  """list of rejected documents, with current returned state"""
  rejected: [BlobInfo!]!

  """List of errors associated with rejected documents"""
  errors: [UpdateError!]
}

"""schema for blobinfos collection"""
input BlobInfoInput {
  hash: String!
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UUID
  type: String!
  mimeType: String!
  size: Int!
  source: String!
  local: Boolean
}

type Subscription {
  syncAccountUpdates: [Account!]!
  syncAccountInfoUpdates: [AccountInfo!]!
  syncSessionUpdates: [Session!]!
  syncDocumentUpdates: [Document!]!
  syncDocumentMemberUpdates: [DocumentMember!]!
  syncDocumentHighlightUpdates: [DocumentHighlight!]!
  syncBlobInfoUpdates: [BlobInfo!]!
}
