// Code generated by pggen. DO NOT EDIT.

package queries

import (
	"context"
	"fmt"
	"github.com/jackc/pgtype/zeronull"
	"github.com/jackc/pgx/v4"
)

const upsertAccountSQL = `INSERT INTO public.accounts (
  id,
  created_at,
  updated_at,
  deleted_at,
  name
) VALUES (
  $1,
  $2,
  $3,
  $4,
  NULLIF($5, '')
)
ON CONFLICT (id) DO
UPDATE SET
  updated_at =
    CASE WHEN accounts.updated_at < EXCLUDED.updated_at
    THEN EXCLUDED.updated_at
    ELSE accounts.updated_at END,
  deleted_at =
    CASE WHEN accounts.updated_at < EXCLUDED.updated_at
    THEN EXCLUDED.deleted_at
    ELSE accounts.deleted_at END,
  name =
    CASE WHEN accounts.updated_at < EXCLUDED.updated_at
    THEN COALESCE(EXCLUDED.name, accounts.name)
    ELSE accounts.name END
RETURNING *;`

type UpsertAccountParams struct {
	ID        zeronull.UUID
	CreatedAt zeronull.Timestamptz
	UpdatedAt zeronull.Timestamptz
	DeletedAt zeronull.Timestamptz
	Name      zeronull.Text
}

type UpsertAccountRow struct {
	ID        zeronull.UUID        `json:"id"`
	CreatedAt zeronull.Timestamptz `json:"created_at"`
	UpdatedAt zeronull.Timestamptz `json:"updated_at"`
	DeletedAt zeronull.Timestamptz `json:"deleted_at"`
	Name      zeronull.Text        `json:"name"`
}

// UpsertAccount implements Querier.UpsertAccount.
func (q *DBQuerier) UpsertAccount(ctx context.Context, params UpsertAccountParams) (UpsertAccountRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpsertAccount")
	row := q.conn.QueryRow(ctx, upsertAccountSQL, params.ID, params.CreatedAt, params.UpdatedAt, params.DeletedAt, params.Name)
	var item UpsertAccountRow
	if err := row.Scan(&item.ID, &item.CreatedAt, &item.UpdatedAt, &item.DeletedAt, &item.Name); err != nil {
		return item, fmt.Errorf("query UpsertAccount: %w", err)
	}
	return item, nil
}

// UpsertAccountBatch implements Querier.UpsertAccountBatch.
func (q *DBQuerier) UpsertAccountBatch(batch genericBatch, params UpsertAccountParams) {
	batch.Queue(upsertAccountSQL, params.ID, params.CreatedAt, params.UpdatedAt, params.DeletedAt, params.Name)
}

// UpsertAccountScan implements Querier.UpsertAccountScan.
func (q *DBQuerier) UpsertAccountScan(results pgx.BatchResults) (UpsertAccountRow, error) {
	row := results.QueryRow()
	var item UpsertAccountRow
	if err := row.Scan(&item.ID, &item.CreatedAt, &item.UpdatedAt, &item.DeletedAt, &item.Name); err != nil {
		return item, fmt.Errorf("scan UpsertAccountBatch row: %w", err)
	}
	return item, nil
}
