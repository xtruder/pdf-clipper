// Code generated by pggen. DO NOT EDIT.

package queries

import (
	"context"
	"fmt"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgtype/zeronull"
	"github.com/jackc/pgx/v4"
)

const upsertDocumentHighlightSQL = `INSERT INTO public.document_highlights (
  id,
  document_id,
  created_at,
  updated_at,
  deleted_at,
  created_by,
  location,
  content,
  sequence,
  image_hash
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  NULLIF($10, '')
)
ON CONFLICT (id) DO
UPDATE SET
  updated_at =
    CASE WHEN document_highlights.updated_at < EXCLUDED.updated_at
    THEN EXCLUDED.updated_at
    ELSE document_highlights.updated_at END,
  deleted_at =
    CASE WHEN document_highlights.updated_at < EXCLUDED.updated_at
    THEN EXCLUDED.deleted_at
    ELSE document_highlights.deleted_at END,
  location =
    CASE WHEN document_highlights.updated_at < EXCLUDED.updated_at
    THEN EXCLUDED.location
    ELSE document_highlights.location END,
  content =
    CASE WHEN document_highlights.updated_at < EXCLUDED.updated_at
    THEN EXCLUDED.content
    ELSE document_highlights.content END,
  sequence =
    CASE WHEN document_highlights.updated_at < EXCLUDED.updated_at
    THEN EXCLUDED.sequence
    ELSE document_highlights.sequence END,
  image_hash =
    CASE WHEN document_highlights.updated_at < EXCLUDED.updated_at
    THEN COALESCE(EXCLUDED.image_hash, document_highlights.image_hash)
    ELSE document_highlights.image_hash END
RETURNING *;`

type UpsertDocumentHighlightParams struct {
	ID         zeronull.UUID
	DocumentID zeronull.UUID
	CreatedAt  zeronull.Timestamptz
	UpdatedAt  zeronull.Timestamptz
	DeletedAt  zeronull.Timestamptz
	AccountID  zeronull.UUID
	Location   pgtype.JSONB
	Content    pgtype.JSONB
	Sequence   zeronull.Text
	ImageHash  zeronull.Text
}

type UpsertDocumentHighlightRow struct {
	ID         zeronull.UUID        `json:"id"`
	DocumentID zeronull.UUID        `json:"document_id"`
	CreatedAt  zeronull.Timestamptz `json:"created_at"`
	UpdatedAt  zeronull.Timestamptz `json:"updated_at"`
	DeletedAt  zeronull.Timestamptz `json:"deleted_at"`
	CreatedBy  zeronull.UUID        `json:"created_by"`
	Location   pgtype.JSONB         `json:"location"`
	Content    pgtype.JSONB         `json:"content"`
	Sequence   zeronull.Text        `json:"sequence"`
	ImageHash  zeronull.Text        `json:"image_hash"`
}

// UpsertDocumentHighlight implements Querier.UpsertDocumentHighlight.
func (q *DBQuerier) UpsertDocumentHighlight(ctx context.Context, params UpsertDocumentHighlightParams) (UpsertDocumentHighlightRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpsertDocumentHighlight")
	row := q.conn.QueryRow(ctx, upsertDocumentHighlightSQL, params.ID, params.DocumentID, params.CreatedAt, params.UpdatedAt, params.DeletedAt, params.AccountID, params.Location, params.Content, params.Sequence, params.ImageHash)
	var item UpsertDocumentHighlightRow
	if err := row.Scan(&item.ID, &item.DocumentID, &item.CreatedAt, &item.UpdatedAt, &item.DeletedAt, &item.CreatedBy, &item.Location, &item.Content, &item.Sequence, &item.ImageHash); err != nil {
		return item, fmt.Errorf("query UpsertDocumentHighlight: %w", err)
	}
	return item, nil
}

// UpsertDocumentHighlightBatch implements Querier.UpsertDocumentHighlightBatch.
func (q *DBQuerier) UpsertDocumentHighlightBatch(batch genericBatch, params UpsertDocumentHighlightParams) {
	batch.Queue(upsertDocumentHighlightSQL, params.ID, params.DocumentID, params.CreatedAt, params.UpdatedAt, params.DeletedAt, params.AccountID, params.Location, params.Content, params.Sequence, params.ImageHash)
}

// UpsertDocumentHighlightScan implements Querier.UpsertDocumentHighlightScan.
func (q *DBQuerier) UpsertDocumentHighlightScan(results pgx.BatchResults) (UpsertDocumentHighlightRow, error) {
	row := results.QueryRow()
	var item UpsertDocumentHighlightRow
	if err := row.Scan(&item.ID, &item.DocumentID, &item.CreatedAt, &item.UpdatedAt, &item.DeletedAt, &item.CreatedBy, &item.Location, &item.Content, &item.Sequence, &item.ImageHash); err != nil {
		return item, fmt.Errorf("scan UpsertDocumentHighlightBatch row: %w", err)
	}
	return item, nil
}
