// Code generated by pggen. DO NOT EDIT.

package queries

import (
	"context"
	"fmt"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgtype/zeronull"
	"github.com/jackc/pgx/v4"
)

const getDocumentUpdatesForDocumentSQL = `SELECT
  documents.id,
  documents.created_at,
  documents.updated_at,
  documents.deleted_at,
  documents.created_by,
  documents.type,
  documents.meta,
  documents.file_hash
FROM public.documents
WHERE
  documents.updated_at > $1 AND
  documents.id = $2;`

type GetDocumentUpdatesForDocumentRow struct {
	ID        zeronull.UUID        `json:"id"`
	CreatedAt zeronull.Timestamptz `json:"created_at"`
	UpdatedAt zeronull.Timestamptz `json:"updated_at"`
	DeletedAt zeronull.Timestamptz `json:"deleted_at"`
	CreatedBy zeronull.UUID        `json:"created_by"`
	Type      DocumentType         `json:"type"`
	Meta      pgtype.JSONB         `json:"meta"`
	FileHash  zeronull.Text        `json:"file_hash"`
}

// GetDocumentUpdatesForDocument implements Querier.GetDocumentUpdatesForDocument.
func (q *DBQuerier) GetDocumentUpdatesForDocument(ctx context.Context, since zeronull.Timestamptz, documentID zeronull.UUID) ([]GetDocumentUpdatesForDocumentRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetDocumentUpdatesForDocument")
	rows, err := q.conn.Query(ctx, getDocumentUpdatesForDocumentSQL, since, documentID)
	if err != nil {
		return nil, fmt.Errorf("query GetDocumentUpdatesForDocument: %w", err)
	}
	defer rows.Close()
	items := []GetDocumentUpdatesForDocumentRow{}
	for rows.Next() {
		var item GetDocumentUpdatesForDocumentRow
		if err := rows.Scan(&item.ID, &item.CreatedAt, &item.UpdatedAt, &item.DeletedAt, &item.CreatedBy, &item.Type, &item.Meta, &item.FileHash); err != nil {
			return nil, fmt.Errorf("scan GetDocumentUpdatesForDocument row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetDocumentUpdatesForDocument rows: %w", err)
	}
	return items, err
}

// GetDocumentUpdatesForDocumentBatch implements Querier.GetDocumentUpdatesForDocumentBatch.
func (q *DBQuerier) GetDocumentUpdatesForDocumentBatch(batch genericBatch, since zeronull.Timestamptz, documentID zeronull.UUID) {
	batch.Queue(getDocumentUpdatesForDocumentSQL, since, documentID)
}

// GetDocumentUpdatesForDocumentScan implements Querier.GetDocumentUpdatesForDocumentScan.
func (q *DBQuerier) GetDocumentUpdatesForDocumentScan(results pgx.BatchResults) ([]GetDocumentUpdatesForDocumentRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query GetDocumentUpdatesForDocumentBatch: %w", err)
	}
	defer rows.Close()
	items := []GetDocumentUpdatesForDocumentRow{}
	for rows.Next() {
		var item GetDocumentUpdatesForDocumentRow
		if err := rows.Scan(&item.ID, &item.CreatedAt, &item.UpdatedAt, &item.DeletedAt, &item.CreatedBy, &item.Type, &item.Meta, &item.FileHash); err != nil {
			return nil, fmt.Errorf("scan GetDocumentUpdatesForDocumentBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetDocumentUpdatesForDocumentBatch rows: %w", err)
	}
	return items, err
}
