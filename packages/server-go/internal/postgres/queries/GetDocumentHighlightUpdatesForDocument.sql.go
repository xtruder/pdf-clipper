// Code generated by pggen. DO NOT EDIT.

package queries

import (
	"context"
	"fmt"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgtype/zeronull"
	"github.com/jackc/pgx/v4"
)

const getDocumentHighlightUpdatesForDocumentSQL = `SELECT
  document_highlights.id,
  document_highlights.document_id,
  document_highlights.created_at,
  document_highlights.updated_at,
  document_highlights.deleted_at,
  document_highlights.created_by,
  document_highlights.location,
  document_highlights.content,
  document_highlights.sequence,
  document_highlights.image_hash
FROM public.document_highlights
WHERE
  document_highlights.updated_at > $1 AND
  document_highlights.document_id = $2;`

type GetDocumentHighlightUpdatesForDocumentRow struct {
	ID         zeronull.UUID        `json:"id"`
	DocumentID zeronull.UUID        `json:"document_id"`
	CreatedAt  zeronull.Timestamptz `json:"created_at"`
	UpdatedAt  zeronull.Timestamptz `json:"updated_at"`
	DeletedAt  zeronull.Timestamptz `json:"deleted_at"`
	CreatedBy  zeronull.UUID        `json:"created_by"`
	Location   pgtype.JSONB         `json:"location"`
	Content    pgtype.JSONB         `json:"content"`
	Sequence   zeronull.Text        `json:"sequence"`
	ImageHash  zeronull.Text        `json:"image_hash"`
}

// GetDocumentHighlightUpdatesForDocument implements Querier.GetDocumentHighlightUpdatesForDocument.
func (q *DBQuerier) GetDocumentHighlightUpdatesForDocument(ctx context.Context, since zeronull.Timestamptz, documentID zeronull.UUID) ([]GetDocumentHighlightUpdatesForDocumentRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetDocumentHighlightUpdatesForDocument")
	rows, err := q.conn.Query(ctx, getDocumentHighlightUpdatesForDocumentSQL, since, documentID)
	if err != nil {
		return nil, fmt.Errorf("query GetDocumentHighlightUpdatesForDocument: %w", err)
	}
	defer rows.Close()
	items := []GetDocumentHighlightUpdatesForDocumentRow{}
	for rows.Next() {
		var item GetDocumentHighlightUpdatesForDocumentRow
		if err := rows.Scan(&item.ID, &item.DocumentID, &item.CreatedAt, &item.UpdatedAt, &item.DeletedAt, &item.CreatedBy, &item.Location, &item.Content, &item.Sequence, &item.ImageHash); err != nil {
			return nil, fmt.Errorf("scan GetDocumentHighlightUpdatesForDocument row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetDocumentHighlightUpdatesForDocument rows: %w", err)
	}
	return items, err
}

// GetDocumentHighlightUpdatesForDocumentBatch implements Querier.GetDocumentHighlightUpdatesForDocumentBatch.
func (q *DBQuerier) GetDocumentHighlightUpdatesForDocumentBatch(batch genericBatch, since zeronull.Timestamptz, documentID zeronull.UUID) {
	batch.Queue(getDocumentHighlightUpdatesForDocumentSQL, since, documentID)
}

// GetDocumentHighlightUpdatesForDocumentScan implements Querier.GetDocumentHighlightUpdatesForDocumentScan.
func (q *DBQuerier) GetDocumentHighlightUpdatesForDocumentScan(results pgx.BatchResults) ([]GetDocumentHighlightUpdatesForDocumentRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query GetDocumentHighlightUpdatesForDocumentBatch: %w", err)
	}
	defer rows.Close()
	items := []GetDocumentHighlightUpdatesForDocumentRow{}
	for rows.Next() {
		var item GetDocumentHighlightUpdatesForDocumentRow
		if err := rows.Scan(&item.ID, &item.DocumentID, &item.CreatedAt, &item.UpdatedAt, &item.DeletedAt, &item.CreatedBy, &item.Location, &item.Content, &item.Sequence, &item.ImageHash); err != nil {
			return nil, fmt.Errorf("scan GetDocumentHighlightUpdatesForDocumentBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetDocumentHighlightUpdatesForDocumentBatch rows: %w", err)
	}
	return items, err
}
