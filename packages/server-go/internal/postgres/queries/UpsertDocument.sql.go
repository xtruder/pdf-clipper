// Code generated by pggen. DO NOT EDIT.

package queries

import (
	"context"
	"fmt"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgtype/zeronull"
	"github.com/jackc/pgx/v4"
)

const upsertDocumentSQL = `INSERT INTO public.documents (
  id,
  created_at,
  updated_at,
  deleted_at,
  created_by,
  owner_id,
  type,
  meta,
  file_hash
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $5,
  $6,
  $7,
  NULLIF($8, '')
)
ON CONFLICT (id) DO
UPDATE SET
  updated_at =
    CASE WHEN documents.updated_at < EXCLUDED.updated_at
    THEN EXCLUDED.updated_at
    ELSE documents.updated_at END,
  deleted_at =
    CASE WHEN documents.updated_at < EXCLUDED.updated_at
    THEN EXCLUDED.deleted_at
    ELSE documents.deleted_at END,
  meta =
    CASE WHEN documents.updated_at < EXCLUDED.updated_at
    THEN EXCLUDED.meta
    ELSE documents.meta END,
  file_hash =
    CASE WHEN documents.updated_at < EXCLUDED.updated_at
    THEN COALESCE(EXCLUDED.file_hash, documents.file_hash)
    ELSE documents.file_hash END
RETURNING *;`

type UpsertDocumentParams struct {
	ID        zeronull.UUID
	CreatedAt zeronull.Timestamptz
	UpdatedAt zeronull.Timestamptz
	DeletedAt zeronull.Timestamptz
	AccountID zeronull.UUID
	Type      DocumentType
	Meta      pgtype.JSONB
	FileHash  zeronull.Text
}

type UpsertDocumentRow struct {
	ID        zeronull.UUID        `json:"id"`
	CreatedAt zeronull.Timestamptz `json:"created_at"`
	UpdatedAt zeronull.Timestamptz `json:"updated_at"`
	DeletedAt zeronull.Timestamptz `json:"deleted_at"`
	CreatedBy zeronull.UUID        `json:"created_by"`
	OwnerID   zeronull.UUID        `json:"owner_id"`
	Type      DocumentType         `json:"type"`
	Meta      pgtype.JSONB         `json:"meta"`
	FileHash  zeronull.Text        `json:"file_hash"`
}

// UpsertDocument implements Querier.UpsertDocument.
func (q *DBQuerier) UpsertDocument(ctx context.Context, params UpsertDocumentParams) (UpsertDocumentRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpsertDocument")
	row := q.conn.QueryRow(ctx, upsertDocumentSQL, params.ID, params.CreatedAt, params.UpdatedAt, params.DeletedAt, params.AccountID, params.Type, params.Meta, params.FileHash)
	var item UpsertDocumentRow
	if err := row.Scan(&item.ID, &item.CreatedAt, &item.UpdatedAt, &item.DeletedAt, &item.CreatedBy, &item.OwnerID, &item.Type, &item.Meta, &item.FileHash); err != nil {
		return item, fmt.Errorf("query UpsertDocument: %w", err)
	}
	return item, nil
}

// UpsertDocumentBatch implements Querier.UpsertDocumentBatch.
func (q *DBQuerier) UpsertDocumentBatch(batch genericBatch, params UpsertDocumentParams) {
	batch.Queue(upsertDocumentSQL, params.ID, params.CreatedAt, params.UpdatedAt, params.DeletedAt, params.AccountID, params.Type, params.Meta, params.FileHash)
}

// UpsertDocumentScan implements Querier.UpsertDocumentScan.
func (q *DBQuerier) UpsertDocumentScan(results pgx.BatchResults) (UpsertDocumentRow, error) {
	row := results.QueryRow()
	var item UpsertDocumentRow
	if err := row.Scan(&item.ID, &item.CreatedAt, &item.UpdatedAt, &item.DeletedAt, &item.CreatedBy, &item.OwnerID, &item.Type, &item.Meta, &item.FileHash); err != nil {
		return item, fmt.Errorf("scan UpsertDocumentBatch row: %w", err)
	}
	return item, nil
}
