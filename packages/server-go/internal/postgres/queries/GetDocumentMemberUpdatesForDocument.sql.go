// Code generated by pggen. DO NOT EDIT.

package queries

import (
	"context"
	"fmt"
	"github.com/jackc/pgtype/zeronull"
	"github.com/jackc/pgx/v4"
)

const getDocumentMemberUpdatesForDocumentSQL = `SELECT
  document_members.account_id,
  document_members.document_id,
  document_members.created_at,
  document_members.updated_at,
  document_members.deleted_at,
  document_members.created_by,
  document_members.accepted_at,
  document_members.role
FROM public.document_members
WHERE
  document_members.updated_at > $1 AND
  document_members.document_id = $2;`

type GetDocumentMemberUpdatesForDocumentRow struct {
	AccountID  zeronull.UUID        `json:"account_id"`
	DocumentID zeronull.UUID        `json:"document_id"`
	CreatedAt  zeronull.Timestamptz `json:"created_at"`
	UpdatedAt  zeronull.Timestamptz `json:"updated_at"`
	DeletedAt  zeronull.Timestamptz `json:"deleted_at"`
	CreatedBy  zeronull.UUID        `json:"created_by"`
	AcceptedAt zeronull.Timestamptz `json:"accepted_at"`
	Role       DocumentRole         `json:"role"`
}

// GetDocumentMemberUpdatesForDocument implements Querier.GetDocumentMemberUpdatesForDocument.
func (q *DBQuerier) GetDocumentMemberUpdatesForDocument(ctx context.Context, since zeronull.Timestamptz, documentID zeronull.UUID) ([]GetDocumentMemberUpdatesForDocumentRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "GetDocumentMemberUpdatesForDocument")
	rows, err := q.conn.Query(ctx, getDocumentMemberUpdatesForDocumentSQL, since, documentID)
	if err != nil {
		return nil, fmt.Errorf("query GetDocumentMemberUpdatesForDocument: %w", err)
	}
	defer rows.Close()
	items := []GetDocumentMemberUpdatesForDocumentRow{}
	for rows.Next() {
		var item GetDocumentMemberUpdatesForDocumentRow
		if err := rows.Scan(&item.AccountID, &item.DocumentID, &item.CreatedAt, &item.UpdatedAt, &item.DeletedAt, &item.CreatedBy, &item.AcceptedAt, &item.Role); err != nil {
			return nil, fmt.Errorf("scan GetDocumentMemberUpdatesForDocument row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetDocumentMemberUpdatesForDocument rows: %w", err)
	}
	return items, err
}

// GetDocumentMemberUpdatesForDocumentBatch implements Querier.GetDocumentMemberUpdatesForDocumentBatch.
func (q *DBQuerier) GetDocumentMemberUpdatesForDocumentBatch(batch genericBatch, since zeronull.Timestamptz, documentID zeronull.UUID) {
	batch.Queue(getDocumentMemberUpdatesForDocumentSQL, since, documentID)
}

// GetDocumentMemberUpdatesForDocumentScan implements Querier.GetDocumentMemberUpdatesForDocumentScan.
func (q *DBQuerier) GetDocumentMemberUpdatesForDocumentScan(results pgx.BatchResults) ([]GetDocumentMemberUpdatesForDocumentRow, error) {
	rows, err := results.Query()
	if err != nil {
		return nil, fmt.Errorf("query GetDocumentMemberUpdatesForDocumentBatch: %w", err)
	}
	defer rows.Close()
	items := []GetDocumentMemberUpdatesForDocumentRow{}
	for rows.Next() {
		var item GetDocumentMemberUpdatesForDocumentRow
		if err := rows.Scan(&item.AccountID, &item.DocumentID, &item.CreatedAt, &item.UpdatedAt, &item.DeletedAt, &item.CreatedBy, &item.AcceptedAt, &item.Role); err != nil {
			return nil, fmt.Errorf("scan GetDocumentMemberUpdatesForDocumentBatch row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close GetDocumentMemberUpdatesForDocumentBatch rows: %w", err)
	}
	return items, err
}
