// Code generated by pggen. DO NOT EDIT.

package queries

import (
	"context"
	"fmt"
	"github.com/jackc/pgtype/zeronull"
	"github.com/jackc/pgx/v4"
)

const upsertBlobInfoSQL = `INSERT INTO public.blob_infos (
  hash,
  created_at,
  updated_at,
  created_by,
  type,
  size,
  mime_type,
  source
) VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  NULLIF($8, '')
)
ON CONFLICT (hash) DO
UPDATE SET
  updated_at =
    CASE WHEN blob_infos.updated_at < EXCLUDED.updated_at
    THEN EXCLUDED.updated_at
    ELSE blob_infos.updated_at END,
  source =
    CASE WHEN blob_infos.updated_at < EXCLUDED.updated_at
    THEN COALESCE(EXCLUDED.source, blob_infos.source)
    ELSE blob_infos.source END
RETURNING *;`

type UpsertBlobInfoParams struct {
	Hash      zeronull.Text
	CreatedAt zeronull.Timestamptz
	UpdatedAt zeronull.Timestamptz
	CreatedBy zeronull.UUID
	Type      BlobType
	Size      int32
	MimeType  zeronull.Text
	Source    zeronull.Text
}

type UpsertBlobInfoRow struct {
	Hash      zeronull.Text        `json:"hash"`
	Type      BlobType             `json:"type"`
	CreatedAt zeronull.Timestamptz `json:"created_at"`
	UpdatedAt zeronull.Timestamptz `json:"updated_at"`
	CreatedBy zeronull.UUID        `json:"created_by"`
	MimeType  zeronull.Text        `json:"mime_type"`
	Size      int32                `json:"size"`
	Source    zeronull.Text        `json:"source"`
}

// UpsertBlobInfo implements Querier.UpsertBlobInfo.
func (q *DBQuerier) UpsertBlobInfo(ctx context.Context, params UpsertBlobInfoParams) (UpsertBlobInfoRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UpsertBlobInfo")
	row := q.conn.QueryRow(ctx, upsertBlobInfoSQL, params.Hash, params.CreatedAt, params.UpdatedAt, params.CreatedBy, params.Type, params.Size, params.MimeType, params.Source)
	var item UpsertBlobInfoRow
	if err := row.Scan(&item.Hash, &item.Type, &item.CreatedAt, &item.UpdatedAt, &item.CreatedBy, &item.MimeType, &item.Size, &item.Source); err != nil {
		return item, fmt.Errorf("query UpsertBlobInfo: %w", err)
	}
	return item, nil
}

// UpsertBlobInfoBatch implements Querier.UpsertBlobInfoBatch.
func (q *DBQuerier) UpsertBlobInfoBatch(batch genericBatch, params UpsertBlobInfoParams) {
	batch.Queue(upsertBlobInfoSQL, params.Hash, params.CreatedAt, params.UpdatedAt, params.CreatedBy, params.Type, params.Size, params.MimeType, params.Source)
}

// UpsertBlobInfoScan implements Querier.UpsertBlobInfoScan.
func (q *DBQuerier) UpsertBlobInfoScan(results pgx.BatchResults) (UpsertBlobInfoRow, error) {
	row := results.QueryRow()
	var item UpsertBlobInfoRow
	if err := row.Scan(&item.Hash, &item.Type, &item.CreatedAt, &item.UpdatedAt, &item.CreatedBy, &item.MimeType, &item.Size, &item.Source); err != nil {
		return item, fmt.Errorf("scan UpsertBlobInfoBatch row: %w", err)
	}
	return item, nil
}
